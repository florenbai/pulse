// Code generated by Kitex v0.5.1. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	sso "minos/kitex_gen/sso"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*sso.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserList":       kitex.NewMethodInfo(userListHandler, newUserListArgs, newUserListResult, false),
		"UserByUsername": kitex.NewMethodInfo(userByUsernameHandler, newUserByUsernameArgs, newUserByUsernameResult, false),
		"UserById":       kitex.NewMethodInfo(userByIdHandler, newUserByIdArgs, newUserByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func userListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sso.UserQuery)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sso.UserService).UserList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserListArgs:
		success, err := handler.(sso.UserService).UserList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserListResult)
		realResult.Success = success
	}
	return nil
}
func newUserListArgs() interface{} {
	return &UserListArgs{}
}

func newUserListResult() interface{} {
	return &UserListResult{}
}

type UserListArgs struct {
	Req *sso.UserQuery
}

func (p *UserListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserListArgs) Unmarshal(in []byte) error {
	msg := new(sso.UserQuery)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserListArgs_Req_DEFAULT *sso.UserQuery

func (p *UserListArgs) GetReq() *sso.UserQuery {
	if !p.IsSetReq() {
		return UserListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserListResult struct {
	Success *sso.UserListResp
}

var UserListResult_Success_DEFAULT *sso.UserListResp

func (p *UserListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserListResult) Unmarshal(in []byte) error {
	msg := new(sso.UserListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserListResult) GetSuccess() *sso.UserListResp {
	if !p.IsSetSuccess() {
		return UserListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*sso.UserListResp)
}

func (p *UserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserListResult) GetResult() interface{} {
	return p.Success
}

func userByUsernameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sso.GetUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sso.UserService).UserByUsername(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserByUsernameArgs:
		success, err := handler.(sso.UserService).UserByUsername(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserByUsernameResult)
		realResult.Success = success
	}
	return nil
}
func newUserByUsernameArgs() interface{} {
	return &UserByUsernameArgs{}
}

func newUserByUsernameResult() interface{} {
	return &UserByUsernameResult{}
}

type UserByUsernameArgs struct {
	Req *sso.GetUserReq
}

func (p *UserByUsernameArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserByUsernameArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserByUsernameArgs) Unmarshal(in []byte) error {
	msg := new(sso.GetUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserByUsernameArgs_Req_DEFAULT *sso.GetUserReq

func (p *UserByUsernameArgs) GetReq() *sso.GetUserReq {
	if !p.IsSetReq() {
		return UserByUsernameArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserByUsernameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserByUsernameArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserByUsernameResult struct {
	Success *sso.UserInfo
}

var UserByUsernameResult_Success_DEFAULT *sso.UserInfo

func (p *UserByUsernameResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserByUsernameResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserByUsernameResult) Unmarshal(in []byte) error {
	msg := new(sso.UserInfo)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserByUsernameResult) GetSuccess() *sso.UserInfo {
	if !p.IsSetSuccess() {
		return UserByUsernameResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserByUsernameResult) SetSuccess(x interface{}) {
	p.Success = x.(*sso.UserInfo)
}

func (p *UserByUsernameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserByUsernameResult) GetResult() interface{} {
	return p.Success
}

func userByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(sso.GetUserByIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(sso.UserService).UserById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserByIdArgs:
		success, err := handler.(sso.UserService).UserById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserByIdResult)
		realResult.Success = success
	}
	return nil
}
func newUserByIdArgs() interface{} {
	return &UserByIdArgs{}
}

func newUserByIdResult() interface{} {
	return &UserByIdResult{}
}

type UserByIdArgs struct {
	Req *sso.GetUserByIdReq
}

func (p *UserByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserByIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserByIdArgs) Unmarshal(in []byte) error {
	msg := new(sso.GetUserByIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserByIdArgs_Req_DEFAULT *sso.GetUserByIdReq

func (p *UserByIdArgs) GetReq() *sso.GetUserByIdReq {
	if !p.IsSetReq() {
		return UserByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserByIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserByIdResult struct {
	Success *sso.UserInfo
}

var UserByIdResult_Success_DEFAULT *sso.UserInfo

func (p *UserByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserByIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserByIdResult) Unmarshal(in []byte) error {
	msg := new(sso.UserInfo)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserByIdResult) GetSuccess() *sso.UserInfo {
	if !p.IsSetSuccess() {
		return UserByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*sso.UserInfo)
}

func (p *UserByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserByIdResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserList(ctx context.Context, Req *sso.UserQuery) (r *sso.UserListResp, err error) {
	var _args UserListArgs
	_args.Req = Req
	var _result UserListResult
	if err = p.c.Call(ctx, "UserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserByUsername(ctx context.Context, Req *sso.GetUserReq) (r *sso.UserInfo, err error) {
	var _args UserByUsernameArgs
	_args.Req = Req
	var _result UserByUsernameResult
	if err = p.c.Call(ctx, "UserByUsername", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserById(ctx context.Context, Req *sso.GetUserByIdReq) (r *sso.UserInfo, err error) {
	var _args UserByIdArgs
	_args.Req = Req
	var _result UserByIdResult
	if err = p.c.Call(ctx, "UserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
