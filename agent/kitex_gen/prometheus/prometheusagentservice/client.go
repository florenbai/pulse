// Code generated by Kitex v0.9.0. DO NOT EDIT.

package prometheusagentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	prometheus "agent/kitex_gen/prometheus"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateAlertGroup(ctx context.Context, Req *prometheus.AlertGroupRequest, callOptions ...callopt.Option) (r *emptypb.Empty, err error)
	DeleteAlertGroup(ctx context.Context, Req *prometheus.AlertGroupRequest, callOptions ...callopt.Option) (r *emptypb.Empty, err error)
	CreateAlertRules(ctx context.Context, Req *prometheus.AlertRules, callOptions ...callopt.Option) (r *emptypb.Empty, err error)
	UpdateAlertRule(ctx context.Context, Req *prometheus.UpdateAlertRuleRequest, callOptions ...callopt.Option) (r *emptypb.Empty, err error)
	DeleteAlertRule(ctx context.Context, Req *prometheus.AlertRules, callOptions ...callopt.Option) (r *emptypb.Empty, err error)
	Reload(ctx context.Context, Req *emptypb.Empty, callOptions ...callopt.Option) (r *emptypb.Empty, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPrometheusAgentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPrometheusAgentServiceClient struct {
	*kClient
}

func (p *kPrometheusAgentServiceClient) CreateAlertGroup(ctx context.Context, Req *prometheus.AlertGroupRequest, callOptions ...callopt.Option) (r *emptypb.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAlertGroup(ctx, Req)
}

func (p *kPrometheusAgentServiceClient) DeleteAlertGroup(ctx context.Context, Req *prometheus.AlertGroupRequest, callOptions ...callopt.Option) (r *emptypb.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteAlertGroup(ctx, Req)
}

func (p *kPrometheusAgentServiceClient) CreateAlertRules(ctx context.Context, Req *prometheus.AlertRules, callOptions ...callopt.Option) (r *emptypb.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAlertRules(ctx, Req)
}

func (p *kPrometheusAgentServiceClient) UpdateAlertRule(ctx context.Context, Req *prometheus.UpdateAlertRuleRequest, callOptions ...callopt.Option) (r *emptypb.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAlertRule(ctx, Req)
}

func (p *kPrometheusAgentServiceClient) DeleteAlertRule(ctx context.Context, Req *prometheus.AlertRules, callOptions ...callopt.Option) (r *emptypb.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteAlertRule(ctx, Req)
}

func (p *kPrometheusAgentServiceClient) Reload(ctx context.Context, Req *emptypb.Empty, callOptions ...callopt.Option) (r *emptypb.Empty, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Reload(ctx, Req)
}
